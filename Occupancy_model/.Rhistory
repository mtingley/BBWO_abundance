load("Grid_posterior.Rdata")
est_chip<-abund_est
setwd("~/Dropbox/IBP/Rim Fire/Applications/Chips_Fire/Output")
chip_grid<-read.csv("grid_points.csv")
## Rim
setwd(folder)
setwd("../")
setwd("./Output_Rim")
load("Grid_posterior.Rdata")
est_rim<-abund_est
setwd("~/Dropbox/IBP/Rim Fire/Applications/Rim_Fire/Output")
rim_grid<-read.csv("grid_points.csv")
setwd(folder)
str(est_barr)
est_barr
## Load Libraries
library(raster)
library(rgdal)
library(maptools)
library(fields)
library(R2jags)
## Load Occupancy data and model posterior
folder<-getwd()
setwd("../")
setwd("./Data/Occupancy_data")
load("Occ_data_BBW4rim.Rdata")
load("bbw4rim_results.Rdata") #out_occ
## FIRE DATA
setwd("../")
setwd("./GIS_data_BarryPoint/RAVG_data")
fire_cc<-raster(list.files()[grep("cc_alb.tif",list.files())][1])
fire_outline<-readOGR(dsn=getwd(),layer=strsplit(list.files()[grep("bndy",list.files())][1],".",fixed=T)[[1]][1])
setwd("../")
setwd("./my_layers")
fire_precc<-raster("fire_precc.tif")
fire_dem<-raster("fire_dem_aea.tif")
fire_lat<-raster("fire_lat.tif")
fire_whr<-raster("whrtype_rim.tif")
fire_size<-raster("whrsize_rim.tif")
fire_whr_crosswalk<-read.csv("whr_crosswalk.csv")
setwd(folder)
# Telemetry & Snag data
setwd("../")
setwd("./Data/Telem_data")
load("hr_model.Rdata") #out_hr
load("snag_model.Rdata") #out_snag
load("snag_variable_means.Rdata") #export_snag
### Grid Data
setwd("~/Dropbox/IBP/Rim Fire/Applications/BarryPoint_Fire/Output")
grid<-read.csv("grid_points.csv")
setwd(folder)
######### Scaling all variables
fire_size_raw<-fire_size
elev.res.mod<-coef(lm(export$elev.raw ~ export$lat.raw))
fire_elev_resid<-fire_dem-(fire_lat*elev.res.mod[2]+elev.res.mod[1])
fire_elev.st<-(fire_elev_resid-mean(data.frame(residuals(lm(export$elev.raw ~ export$lat.raw)))[,1]))/sd(data.frame(residuals(lm(export$elev.raw ~ export$lat.raw)))[,1])
fire_elev.st2<-fire_elev.st*fire_elev.st
fire_lat.st<-(fire_lat-mean(export$lat.raw))/sd(export$lat.raw)
values(fire_size)<-ifelse(values(fire_size)>3,1,0)
fire_cc.st<-(fire_cc-mean(export$cc.raw))/sd(export$cc.raw)
fire_precc.st<-(fire_precc-mean(export$precc.raw))/sd(export$precc.raw)
whr_index<-levels(export$whrtype)
fire_veg<-fire_whr_crosswalk[values(fire_whr),1]
fire_veg2<-match(fire_veg,whr_index)
fire_veg2[is.na(fire_veg2)]<-which(whr_index=="OTH")
#Snag layers
snag_fire_cc.st<-(fire_cc-export_snag$mu.cc)/export_snag $sd.cc
snag_fire_cc.st2<-snag_fire_cc.st* snag_fire_cc.st
snag_fire_precc.st<-(fire_precc-export_snag $mu.precc)/export_snag $sd.precc
## Grid points
proj <- CRS("+proj=utm +zone=10 +datum=WGS84 +units=m")  ## check UTM zone
points<-spTransform(x=SpatialPoints(grid[,c("Easting_field","Northing_field")],proj4string=proj),CRS=CRS(projection(fire_cc)))
#### Extract index for grid points, buffered by 250 m
cellnumber<-fire_cc
values(cellnumber)<-1:ncell(fire_cc)
rad_buff<-250
extract_buff<-extract(cellnumber,points,buffer=rad_buff)
names(extract_buff)<-paste(1:length(points),"_",sep="")
grid_cells<-(unlist(extract_buff))
cell_assigns<-as.numeric(sapply(strsplit(names(grid_cells),"_"),"[",1))
pix<-as.vector(grid_cells)
############################ FITTING MODEL
####### Philosophy: do not to calculate for every element of the posterior, only need to
####### Use the posterior to get the distribution, and then draw randomly from that distribution
#Psi: b0[whr[i,l]] + b1*elev[i,l] + b2*elev2[i,l] + b3*size[i,l] + b4*cc[i,l] + b5*precc[i,l] + b6*lat[i,l]
#HR:
`expit` <-function(x){exp(x)/(1+exp(x))}
Mode<-function(z) {density(z)$x[which.max(density(z)$y)]}
post_psi<-out_occ$BUGSoutput$sims.list
post_hr<-out_hr$BUGSoutput$sims.list
post_snag<-out_snag$BUGSoutput$sims.list
#### Extract values from rasters (for speed)
veg_val<-fire_veg2[pix]
elev_val<-values(fire_elev.st)[pix]
elev2_val<-values(fire_elev.st2)[pix]
lat_val<-values(fire_lat.st)[pix]
size_val<-values(fire_size)[pix]
cc_val<-values(fire_cc.st)[pix]
precc_val<-values(fire_precc.st)[pix]
snag_cc_val<-values(snag_fire_cc.st)[pix]
snag_cc2_val<-values(snag_fire_cc.st2)[pix]
snag_precc_val<-values(snag_fire_precc.st)[pix]
snag_size_val<-values(fire_size_raw)[pix]
###### Start Pixel Loop
nsim<-7500     #an arbitratily large number over which to sample from posterior
###### Output value_files
abund_est<-array(dim=nsim)
dpt<-array(dim=nsim)
dens_pt<-array(dim=c(length(points),nsim))
hist(post_psi[[1]])
hist(post_psi[[2]])
mean(post_psi[[2]])
abline(v=.824)
str(post_psi)
str(lapply(post_psi,mean))
mean(post_psi$b1)
mean_psi<-lapply(post_psi,mean)
mean_psi<-lapply(post_psi,mean)[2:7]
mean_psi
class(mean_psi)
mean_psi<-unlist(lapply(post_psi,mean)[2:7])
mean_psi
str(post_psi)
apply(post_psi$b0,2,mean)
mean_psi_b0<-apply(post_psi$b0,2,mean)
str(post_hr)
mean_psi<-unlist(lapply(post_psi,mean))[2:7]
mean_psi_b0<-apply(post_psi$b0,2,mean)
mean_hr<-unlist(lapply(post_hr,mean))[1:2]
mean_hr
mean_psi
str(post_snag)
mean_snag<-unlist(lapply(post_snag,mean))[1:7]
mean_snag
snag_mean
mean_snag
snag_nosim<-exp(
mean_snag[1] +
mean_snag[2]*snag_precc_val +
mean_snag[3]*snag_cc_val +
mean_snag[4]*snag_cc2_val +
mean_snag[5]*snag_precc_val*snag_cc_val +
mean_snag[6]*snag_precc_val*snag_cc2_val +
mean_snag[7]*snag_size_val)
psi_nosim<-expit(
mean_psi_b0[veg_val] +
mean_psi[1]*elev_val +
mean_psi[2]*elev2_val +
mean_psi[3]*size_val +
mean_psi[4]*cc_val +
mean_psi[5]*precc_val +
mean_psi[6]*lat_val)
snag_nosim
psi_nosim
hist(psi_nosim)
hist(snag_nosim)
snag_nosim<-snag_nosim*0.2295687*10 #Convert to m2/ha
hr_nosim<-(exp(mean_hr[1] + mean_hr[2]*snag_nosim))
hist(hr_nosim)
hr_nosim[hr_nosim<20]<-20 # Set minimum home range as 20 ha (warning: including NA's)
hr_nosim[hr_nosim>825]<-825 # Set maximum home range as 825 ha
hist(hr_nosim)
hr_nosim<-1/hr_nosim #density, pairs per hectare
hr_nosim<-hr_nosim*(((xres(fire_cc))^2)/(100^2))  # Density, pairs per cell
mean_hr
########### DESCRIPTION
# Apply Black-backed Woodpecker hierarchical occupancy model for full posterior
# Model the role of uncertainty in biasing results
###########
## Load Libraries
library(raster)
library(rgdal)
library(maptools)
library(fields)
library(R2jags)
## Load Occupancy data and model posterior
folder<-getwd()
setwd("../")
setwd("./Data/Occupancy_data")
load("Occ_data_BBW4rim.Rdata")
load("bbw4rim_results.Rdata") #out_occ
## FIRE DATA
setwd("../")
setwd("./GIS_data_BarryPoint/RAVG_data")
fire_cc<-raster(list.files()[grep("cc_alb.tif",list.files())][1])
fire_outline<-readOGR(dsn=getwd(),layer=strsplit(list.files()[grep("bndy",list.files())][1],".",fixed=T)[[1]][1])
setwd("../")
setwd("./my_layers")
fire_precc<-raster("fire_precc.tif")
fire_dem<-raster("fire_dem_aea.tif")
fire_lat<-raster("fire_lat.tif")
fire_whr<-raster("whrtype_rim.tif")
fire_size<-raster("whrsize_rim.tif")
fire_whr_crosswalk<-read.csv("whr_crosswalk.csv")
setwd(folder)
# Telemetry & Snag data
setwd("../")
setwd("./Data/Telem_data")
load("hr_model.Rdata") #out_hr
load("snag_model.Rdata") #out_snag
load("snag_variable_means.Rdata") #export_snag
### Grid Data
setwd("~/Dropbox/IBP/Rim Fire/Applications/BarryPoint_Fire/Output")
grid<-read.csv("grid_points.csv")
setwd(folder)
######### Scaling all variables
fire_size_raw<-fire_size
elev.res.mod<-coef(lm(export$elev.raw ~ export$lat.raw))
fire_elev_resid<-fire_dem-(fire_lat*elev.res.mod[2]+elev.res.mod[1])
fire_elev.st<-(fire_elev_resid-mean(data.frame(residuals(lm(export$elev.raw ~ export$lat.raw)))[,1]))/sd(data.frame(residuals(lm(export$elev.raw ~ export$lat.raw)))[,1])
fire_elev.st2<-fire_elev.st*fire_elev.st
fire_lat.st<-(fire_lat-mean(export$lat.raw))/sd(export$lat.raw)
values(fire_size)<-ifelse(values(fire_size)>3,1,0)
fire_cc.st<-(fire_cc-mean(export$cc.raw))/sd(export$cc.raw)
fire_precc.st<-(fire_precc-mean(export$precc.raw))/sd(export$precc.raw)
whr_index<-levels(export$whrtype)
fire_veg<-fire_whr_crosswalk[values(fire_whr),1]
fire_veg2<-match(fire_veg,whr_index)
fire_veg2[is.na(fire_veg2)]<-which(whr_index=="OTH")
#Snag layers
snag_fire_cc.st<-(fire_cc-export_snag$mu.cc)/export_snag $sd.cc
snag_fire_cc.st2<-snag_fire_cc.st* snag_fire_cc.st
snag_fire_precc.st<-(fire_precc-export_snag $mu.precc)/export_snag $sd.precc
## Grid points
proj <- CRS("+proj=utm +zone=10 +datum=WGS84 +units=m")  ## check UTM zone
points<-spTransform(x=SpatialPoints(grid[,c("Easting_field","Northing_field")],proj4string=proj),CRS=CRS(projection(fire_cc)))
#### Extract index for grid points, buffered by 250 m
cellnumber<-fire_cc
values(cellnumber)<-1:ncell(fire_cc)
rad_buff<-250
extract_buff<-extract(cellnumber,points,buffer=rad_buff)
names(extract_buff)<-paste(1:length(points),"_",sep="")
grid_cells<-(unlist(extract_buff))
cell_assigns<-as.numeric(sapply(strsplit(names(grid_cells),"_"),"[",1))
pix<-as.vector(grid_cells)
############################ FITTING MODEL
####### Philosophy: do not to calculate for every element of the posterior, only need to
####### Use the posterior to get the distribution, and then draw randomly from that distribution
#Psi: b0[whr[i,l]] + b1*elev[i,l] + b2*elev2[i,l] + b3*size[i,l] + b4*cc[i,l] + b5*precc[i,l] + b6*lat[i,l]
#HR:
`expit` <-function(x){exp(x)/(1+exp(x))}
Mode<-function(z) {density(z)$x[which.max(density(z)$y)]}
post_psi<-out_occ$BUGSoutput$sims.list
post_hr<-out_hr$BUGSoutput$sims.list
post_snag<-out_snag$BUGSoutput$sims.list
#### Extract values from rasters (for speed)
veg_val<-fire_veg2[pix]
elev_val<-values(fire_elev.st)[pix]
elev2_val<-values(fire_elev.st2)[pix]
lat_val<-values(fire_lat.st)[pix]
size_val<-values(fire_size)[pix]
cc_val<-values(fire_cc.st)[pix]
precc_val<-values(fire_precc.st)[pix]
snag_cc_val<-values(snag_fire_cc.st)[pix]
snag_cc2_val<-values(snag_fire_cc.st2)[pix]
snag_precc_val<-values(snag_fire_precc.st)[pix]
snag_size_val<-values(fire_size_raw)[pix]
###### Start Pixel Loop
nsim<-7500     #an arbitratily large number over which to sample from posterior
###### Output value_files
n_full<-array(dim=nsim)
n_psi<-array(dim=nsim)
n_snag<-array(dim=nsim)
n_hr<-array(dim=nsim)
mean_psi<-unlist(lapply(post_psi,mean))[2:7]
mean_psi_b0<-apply(post_psi$b0,2,mean)
mean_hr<-unlist(lapply(post_hr,mean))[1:2]
mean_snag<-unlist(lapply(post_snag,mean))[1:7]
snag_nosim<-exp(
mean_snag[1] +
mean_snag[2]*snag_precc_val +
mean_snag[3]*snag_cc_val +
mean_snag[4]*snag_cc2_val +
mean_snag[5]*snag_precc_val*snag_cc_val +
mean_snag[6]*snag_precc_val*snag_cc2_val +
mean_snag[7]*snag_size_val)
snag_nosim<-snag_nosim*0.2295687*10 #Convert to m2/ha
psi_nosim<-expit(
mean_psi_b0[veg_val] +
mean_psi[1]*elev_val +
mean_psi[2]*elev2_val +
mean_psi[3]*size_val +
mean_psi[4]*cc_val +
mean_psi[5]*precc_val +
mean_psi[6]*lat_val)
hr_nosim<-(exp(mean_hr[1] + mean_hr[2]*snag_nosim))
hr_nosim[hr_nosim<20]<-20 # Set minimum home range as 20 ha (warning: including NA's)
hr_nosim[hr_nosim>825]<-825 # Set maximum home range as 825 ha
hr_nosim<-1/hr_nosim #density, pairs per hectare
hr_nosim<-hr_nosim*(((xres(fire_cc))^2)/(100^2))  # Density, pairs per cell
hr_nosim
dens_mean
dens_mean<-hr_nosim*psi_nosim
dens_mean
is.na(dens_mean)
dens_mean[is.na(dens_mean)]<-0 #Force bad habitat to a density of 0
tapply(dens_mean,cell_assigns,FUN=mean)
dens_mean
dim(dens_mean)
str(dens_mean)
avg_dens<-tapply(dens_mean,cell_assigns,FUN=mean)
pt_keep<-which((avg_dens*(100^2/(res(fire_cc)[1]^2)))^-1<825) #only keep points with avg dens giving hr<825 ha
sum(tapply(dens_mean,cell_assigns,FUN=sum)[pt_keep])
n_mean<-sum(tapply(dens_mean,cell_assigns,FUN=sum)[pt_keep])
nsim
nsim<-10
n_full<-array(dim=nsim)
n_psi<-array(dim=nsim)
n_snag<-array(dim=nsim)
n_hr<-array(dim=nsim)
start.time<-Sys.time()
for(i in 1:nsim) {
### Start posterior loop
# Pick posterior values for this sim
distrib_psi<-c(post_psi$b1[i],post_psi$b2[i],post_psi$b3[i],post_psi$b4[i],post_psi$b5[i],post_psi$b6[i])
distrib_psi_b0<-post_psi$b0[i,]
distrib_hr<-c(post_hr$b0[i],post_hr$b1[i])
distrib_snag<-c(post_snag$b0[i],post_snag$b1[i],post_snag$b2[i],post_snag$b3[i],post_snag$b4[i],post_snag$b5[i],post_snag$b6[i])
# Model all values with this sim
# Snag density
snag_sim<-exp(
distrib_snag[1] +
distrib_snag[2]*snag_precc_val +
distrib_snag[3]*snag_cc_val +
distrib_snag[4]*snag_cc2_val +
distrib_snag[5]*snag_precc_val*snag_cc_val +
distrib_snag[6]*snag_precc_val*snag_cc2_val +
distrib_snag[7]*snag_size_val)
snag_sim<-snag_sim*0.2295687*10 #Convert to m2/ha
# Occupancy
psi_sim<-expit(
distrib_psi_b0[veg_val] +
distrib_psi[1]*elev_val +
distrib_psi[2]*elev2_val +
distrib_psi[3]*size_val +
distrib_psi[4]*cc_val +
distrib_psi[5]*precc_val +
distrib_psi[6]*lat_val)
#Home-range size (full variance)
hr_sim<-(exp(distrib_hr[1] + distrib_hr[2]*snag_sim))
hr_sim[hr_sim<20]<-20 # Set minimum home range as 20 ha (warning: including NA's)
hr_sim[hr_sim>825]<-825 # Set maximum home range as 825 ha
hr_sim<-1/hr_sim #density, pairs per hectare
hr_sim<-hr_sim*(((xres(fire_cc))^2)/(100^2))  # Density, pairs per cell
#Home-range size (hr-only variance)
hr_sim1<-(exp(distrib_hr[1] + distrib_hr[2]*snag_nosim))
hr_sim1[hr_sim1<20]<-20 # Set minimum home range as 20 ha (warning: including NA's)
hr_sim1[hr_sim1>825]<-825 # Set maximum home range as 825 ha
hr_sim1<-1/hr_sim1 #density, pairs per hectare
hr_sim1<-hr_sim1*(((xres(fire_cc))^2)/(100^2))  # Density, pairs per cell
#Home-range size (snag-only variance)
hr_sim2<-(exp(mean_hr[1] + mean_hr[2]*snag_sim))
hr_sim2[hr_sim2<20]<-20 # Set minimum home range as 20 ha (warning: including NA's)
hr_sim2[hr_sim2>825]<-825 # Set maximum home range as 825 ha
hr_sim2<-1/hr_sim2 #density, pairs per hectare
hr_sim2<-hr_sim2*(((xres(fire_cc))^2)/(100^2))  # Density, pairs per cell
# Expected density
dens_vals<-hr_sim*psi_sim
dens_psionly<-hr_nosim*psi_sim
dens_hronly<-hr_sim1*psi_nosim
dens_snagonly<-hr_sim2*psi_nosim
dens_vals[is.na(dens_vals)]<-0 #Force bad habitat to a density of 0
avg_dens<-tapply(dens_vals,cell_assigns,FUN=mean)
pt_keep<-which((avg_dens*(100^2/(res(fire_cc)[1]^2)))^-1<825) #only keep points with avg dens giving hr<825 ha
n_full[i]<-sum(tapply(dens_vals,cell_assigns,FUN=sum)[pt_keep])
dens_psionly[is.na(dens_psionly)]<-0 #Force bad habitat to a density of 0
avg_dens<-tapply(dens_psionly,cell_assigns,FUN=mean)
pt_keep<-which((avg_dens*(100^2/(res(fire_cc)[1]^2)))^-1<825) #only keep points with avg dens giving hr<825 ha
n_psi[i]<-sum(tapply(dens_psionly,cell_assigns,FUN=sum)[pt_keep])
dens_snagonly[is.na(dens_snagonly)]<-0 #Force bad habitat to a density of 0
avg_dens<-tapply(dens_snagonly,cell_assigns,FUN=mean)
pt_keep<-which((avg_dens*(100^2/(res(fire_cc)[1]^2)))^-1<825) #only keep points with avg dens giving hr<825 ha
n_snag[i]<-sum(tapply(dens_snagonly,cell_assigns,FUN=sum)[pt_keep])
dens_hronly[is.na(dens_hronly)]<-0 #Force bad habitat to a density of 0
avg_dens<-tapply(dens_hronly,cell_assigns,FUN=mean)
pt_keep<-which((avg_dens*(100^2/(res(fire_cc)[1]^2)))^-1<825) #only keep points with avg dens giving hr<825 ha
n_hr[i]<-sum(tapply(dens_hronly,cell_assigns,FUN=sum)[pt_keep])
print(paste(round((i/nsim)*100,2),"%"))
}
end.time=Sys.time()
elapsed.time = difftime(end.time, start.time, units='mins')
elapsed.time
elapsed.time*750
nsim<-3000     #an arbitratily large number over which to sample from posterior
###### Output value_files
n_full<-array(dim=nsim)
n_psi<-array(dim=nsim)
n_snag<-array(dim=nsim)
n_hr<-array(dim=nsim)
start.time<-Sys.time()
for(i in 1:nsim) {
### Start posterior loop
# Pick posterior values for this sim
distrib_psi<-c(post_psi$b1[i],post_psi$b2[i],post_psi$b3[i],post_psi$b4[i],post_psi$b5[i],post_psi$b6[i])
distrib_psi_b0<-post_psi$b0[i,]
distrib_hr<-c(post_hr$b0[i],post_hr$b1[i])
distrib_snag<-c(post_snag$b0[i],post_snag$b1[i],post_snag$b2[i],post_snag$b3[i],post_snag$b4[i],post_snag$b5[i],post_snag$b6[i])
# Model all values with this sim
# Snag density
snag_sim<-exp(
distrib_snag[1] +
distrib_snag[2]*snag_precc_val +
distrib_snag[3]*snag_cc_val +
distrib_snag[4]*snag_cc2_val +
distrib_snag[5]*snag_precc_val*snag_cc_val +
distrib_snag[6]*snag_precc_val*snag_cc2_val +
distrib_snag[7]*snag_size_val)
snag_sim<-snag_sim*0.2295687*10 #Convert to m2/ha
# Occupancy
psi_sim<-expit(
distrib_psi_b0[veg_val] +
distrib_psi[1]*elev_val +
distrib_psi[2]*elev2_val +
distrib_psi[3]*size_val +
distrib_psi[4]*cc_val +
distrib_psi[5]*precc_val +
distrib_psi[6]*lat_val)
#Home-range size (full variance)
hr_sim<-(exp(distrib_hr[1] + distrib_hr[2]*snag_sim))
hr_sim[hr_sim<20]<-20 # Set minimum home range as 20 ha (warning: including NA's)
hr_sim[hr_sim>825]<-825 # Set maximum home range as 825 ha
hr_sim<-1/hr_sim #density, pairs per hectare
hr_sim<-hr_sim*(((xres(fire_cc))^2)/(100^2))  # Density, pairs per cell
#Home-range size (hr-only variance)
hr_sim1<-(exp(distrib_hr[1] + distrib_hr[2]*snag_nosim))
hr_sim1[hr_sim1<20]<-20 # Set minimum home range as 20 ha (warning: including NA's)
hr_sim1[hr_sim1>825]<-825 # Set maximum home range as 825 ha
hr_sim1<-1/hr_sim1 #density, pairs per hectare
hr_sim1<-hr_sim1*(((xres(fire_cc))^2)/(100^2))  # Density, pairs per cell
#Home-range size (snag-only variance)
hr_sim2<-(exp(mean_hr[1] + mean_hr[2]*snag_sim))
hr_sim2[hr_sim2<20]<-20 # Set minimum home range as 20 ha (warning: including NA's)
hr_sim2[hr_sim2>825]<-825 # Set maximum home range as 825 ha
hr_sim2<-1/hr_sim2 #density, pairs per hectare
hr_sim2<-hr_sim2*(((xres(fire_cc))^2)/(100^2))  # Density, pairs per cell
# Expected density
dens_vals<-hr_sim*psi_sim
dens_psionly<-hr_nosim*psi_sim
dens_hronly<-hr_sim1*psi_nosim
dens_snagonly<-hr_sim2*psi_nosim
dens_vals[is.na(dens_vals)]<-0 #Force bad habitat to a density of 0
avg_dens<-tapply(dens_vals,cell_assigns,FUN=mean)
pt_keep<-which((avg_dens*(100^2/(res(fire_cc)[1]^2)))^-1<825) #only keep points with avg dens giving hr<825 ha
n_full[i]<-sum(tapply(dens_vals,cell_assigns,FUN=sum)[pt_keep])
dens_psionly[is.na(dens_psionly)]<-0 #Force bad habitat to a density of 0
avg_dens<-tapply(dens_psionly,cell_assigns,FUN=mean)
pt_keep<-which((avg_dens*(100^2/(res(fire_cc)[1]^2)))^-1<825) #only keep points with avg dens giving hr<825 ha
n_psi[i]<-sum(tapply(dens_psionly,cell_assigns,FUN=sum)[pt_keep])
dens_snagonly[is.na(dens_snagonly)]<-0 #Force bad habitat to a density of 0
avg_dens<-tapply(dens_snagonly,cell_assigns,FUN=mean)
pt_keep<-which((avg_dens*(100^2/(res(fire_cc)[1]^2)))^-1<825) #only keep points with avg dens giving hr<825 ha
n_snag[i]<-sum(tapply(dens_snagonly,cell_assigns,FUN=sum)[pt_keep])
dens_hronly[is.na(dens_hronly)]<-0 #Force bad habitat to a density of 0
avg_dens<-tapply(dens_hronly,cell_assigns,FUN=mean)
pt_keep<-which((avg_dens*(100^2/(res(fire_cc)[1]^2)))^-1<825) #only keep points with avg dens giving hr<825 ha
n_hr[i]<-sum(tapply(dens_hronly,cell_assigns,FUN=sum)[pt_keep])
print(paste(round((i/nsim)*100,2),"%"))
}
end.time=Sys.time()
elapsed.time = difftime(end.time, start.time, units='mins')
elapsed.time
nsim
boxplot(n_full,n_psi,n_snag,n_hr)
boxplot(n_full,n_psi,n_snag,n_hr,names=c("Full","Psi","Snag","HR"))
n_mean*2
boxplot(n_full*2,n_psi*2,n_snag*2,n_hr*2,names=c("Full","Psi","Snag","HR"))
abline(h=45.9,col="red")
hist(n_full)
hist(n_full*2)
Mode(n_full*2)
abline(v=45.9)
boxplot(n_full*2,n_psi*2,n_snag*2,n_hr*2,names=c("Full","Psi","Snag","HR"))
abline(h=45.9,col="red")
median(n_full*2)
boxplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"))
boxplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,100))
abline(h=45.9,col="red")
?violin
?violin.plot
??violin
library(vioplot)
vioplot(n_psi*2)
vioplotn_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,100))
vioplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,100))
vioplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,120))
vioplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,110))
vioplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,110),col="gray")
abline(h=45,col="red")
abline(h=Mode(n_full*2),col="red")
vioplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,110),col="gray",rectCol="gray")
vioplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,110),col="gray",rectCol="black")
vioplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,110),col="#00000000",rectCol="black")
vioplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,110),col="gray",rectCol="#00000000")
vioplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,110),col="gray",rectCol="black")
vioplot(n_psi/n_mean)
vioplot(n_psi/n_mean,n_snag/n_mean)
vioplot(n_psi/n_mean,n_snag/n_mean,n_hr/n_mean,n_full/n_mean)
vioplot(n_psi*2,n_snag*2,n_hr*2,n_full*2,names=c("Psi","Snag","HR","Full"),ylim=c(0,110),col="gray",rectCol="black")
vioplot(n_psi/n_mean,n_snag/n_mean,n_hr/n_mean,n_full/n_mean)
## Load required libraries ('rgdal' may require additional installations if computer not previously set-up for R-based GIS)
library(raster)
library(rgdal)
# library(maptools)
# library(fields)
library(R2jags)
folder<-getwd()
setwd("./Occupancy_model")
load("Occupancy_data.Rdata")
load("Occupancy_posterior.Rdata") #out_occ
occ_post<-out_occ
save(occ_post,"Occupancy_posterior.Rdata")
save(occ_post,file="Occupancy_posterior.Rdata")
