max(fitted(m5))
str(m5)
plot(m5$y,fitted(m5))
abline(a=0,b=1,col="red")
hist(fitted(m5))
summary(m5)
hist(snag_plot)
hist(fitted(m3))
plot(fitted(m3),fitted(m5)
)
pred_m1<-predict(m5,type="response",newdata=mod.data)
plot(fitted(m3),pred_m1)
hist(pred_m1)
m31<-glm(snag_ct ~ precc.st + cc.st + cc.st2 + precc.st* cc.st + precc.st* cc.st2 + size,data=mod.data)
plot(fitted(m31),fitted(m3))
plot(fitted(m31),fitted(m5))
hist(m5)
hist(fitted(m31))
m5
str(predict(m5))
hist(predict(m5,"prob"))
predict(m5,type="prob")
head(predict(m5,type="prob"))
dim(predict(m5,type="prob"))
dim(mod.data)
summary(m5)
dim(predict(m3,type="prob"))
dim(predict(m4,type="prob"))
?predict
hist(predict(m5,type="prob"))
head(predict(m5,type="prob"))
summary(m4)
sum(predict(m5,type="prob")[,1])
sum(fitted(m5)<1)
sum(fitted(m5)<5)
sum(fitted(m5)<2)
sum(fitted(m5)<3)
sum(fitted(m5)<4)
min(fitted(m5))
sum(fitted(m5)<3.1)
sum(fitted(m5)<3.5)
sum(mod.data$snag_ct<1)
m6<-hurdle(snag_ct ~ precc.st + cc.st + cc.st2 + precc.st* cc.st + precc.st* cc.st2 + size | precc.st + cc.st + precc.st* cc.st, data=mod.data, dist="negbin")
vuong(m5,m6)  ## ZI-NegBin is much better
summary(m5)
summary(m6)
sum(mod.data$snag_ct<1)
sum(predict(m6,type="prob")[,1])
sum(dpois(0, fitted(m3)))
pred_m1<-predict(m6,type="response",newdata=mod.data)
plot(snag_plot,pred_m1,xlim=c(0,50),ylim=c(0,50)); abline(a=0,b=1,col="red")
snag_plot<-snag_ct[-c(which(is.na(size)),which(is.na(snag_ct)),which(is.na(precc_bbt_pts)))]
pred_m1<-predict(m6,type="response")
plot(snag_plot,pred_m1,xlim=c(0,50),ylim=c(0,50)); abline(a=0,b=1,col="red")
residuals(m6,type="raw")
residuals(m6,type="response")
hist(residuals(m6,type="response"))
range(residuals(m6,type="response"))
plot(fitted(m5),fitted(,3))
plot(fitted(m5),fitted(m3))
abline(b=1,col="red")
abline(b=1,a=0,col="red")
plot(fitted(m5),fitted(m3),xlab="Hurdle-NB fitted",ylab="Poisson fitted")
abline(b=1,a=0,col="red")
plot(snag_plot,pred_m1,xlim=c(0,50),ylim=c(0,50)); abline(a=0,b=1,col="red")
plot(cc_bbt_pts[-c(which(is.na(size)),which(is.na(snag_ct)),which(is.na(precc_bbt_pts)))],pred_m1); abline(a=0,b=1,col="red")
plot(precc_bbt_pts[-c(which(is.na(size)),which(is.na(snag_ct)),which(is.na(precc_bbt_pts)))],pred_m1)
plot(snag_plot,pred_m1,xlim=c(0,50),ylim=c(0,50)); abline(a=0,b=1,col="red",xlab=)
plot(snag_plot,pred_m1,xlim=c(0,50),ylim=c(0,50)),xlab="Response",ylab="Fitted"; abline(a=0,b=1,col="red")
plot(snag_plot,pred_m1,xlim=c(0,50),ylim=c(0,50),xlab="Response",ylab="Fitted"); abline(a=0,b=1,col="red")
m4
m6
save(m6,file="snag_model.Rdata")
str(m6)
siz
size
hist(size)
m6
summary(m6)
summary(m3)
range(predict(m6,type="prob")[,1])
install.packages('ROCR')
library(ROCR)
snag_ct
snag_ct==0
snag_ct==0*1
(snag_ct>0)*1
table((snag_ct>0)*1)
table((snag_plot>0)*1)
plot(snag_plot,predict(m6,type="prob")[,1])
m6<-hurdle(snag_ct ~ precc.st + cc.st + cc.st2 + precc.st* cc.st + precc.st* cc.st2 + size, data=mod.data, dist="negbin")
summary(m6)
plot(snag_plot,predict(m6,type="prob")[,1])
sum(mod.data$snag_ct<1)
sum(predict(m6,type="prob")[,1])
sum(dpois(0, fitted(m3)))
roc_pred<-prediction(predict(m6,type="prob")[,1],(snag_plot>0)*1)
roc_pred
roc_perf<-performance(roc_pred)
roc_perf<-performance(roc_pred,measure="tpr", x.measure = "fpr")
plot(roc_perf,col=tim.colors(10))
library(fields)
plot(roc_perf,col=tim.colors(10))
m6<-hurdle(snag_ct ~ precc.st + cc.st + cc.st2 + precc.st* cc.st + precc.st* cc.st2 | precc.st + cc.st + cc.st2, data=mod.data, dist="negbin")
summary(m6)
sum(predict(m6,type="prob")[,1])
roc_pred<-prediction(predict(m6,type="prob")[,1],(snag_plot>0)*1)
roc_perf<-performance(roc_pred,measure="tpr", x.measure = "fpr")
predict(m6,type="prob")[,1]
roc_pred<-prediction(predict(m6,type="prob")[,1],(m6$y>0)*1)
roc_perf<-performance(roc_pred,measure="tpr", x.measure = "fpr")
plot(roc_perf,col=tim.colors(10))
str(mod.data)
roc_pred<-prediction(predict(m6,type="prob")[,1],(m6$y==0)*1)
roc_perf<-performance(roc_pred,measure="tpr", x.measure = "fpr")
plot(roc_perf,col=tim.colors(10))
demo(ROCR)
plot(roc_perf,col=tim.colors(10))
par
par()
par(mar=c(0.2,0.2,0.2,0.2))
plot(roc_perf,col=tim.colors(10))
par(mfrow=c(1,1))
plot(roc_perf,col=tim.colors(10))
par(mar=c(2,2,2,2))
plot(roc_perf,col=tim.colors(10))
plot(roc_perf, avg= "vertical", spread.estimate="boxplot", lwd=3,col='blue',
+      show.spread.at= seq(0.1, 0.9, by=0.1),
+      main= "Accuracy across the range of possible cutoffs")
plot(roc_perf, avg= "vertical", spread.estimate="boxplot", lwd=3,col='blue',
show.spread.at= seq(0.1, 0.9, by=0.1),
main= "Accuracy across the range of possible cutoffs")
plot(roc_perf,col=tim.colors(10))
plot(roc_perf, avg= "vertical", spread.estimate="boxplot", lwd=3,col='blue',
show.spread.at= seq(0.1, 0.9, by=0.1),
main= "Accuracy across the range of possible cutoffs")
par(mar=c(4,4,2,2))
roc_perf2<-performance(roc_pred,measure="acc")
plot(roc_perf2, avg= "vertical", spread.estimate="boxplot", lwd=3,col='blue',
show.spread.at= seq(0.1, 0.9, by=0.1),
main= "Accuracy across the range of possible cutoffs")
snag_plot<-snag_ct[-c(which(is.na(size)),which(is.na(snag_ct)),which(is.na(precc_bbt_pts)))]
pred_m1<-predict(m6,type="response")
pred_m1[which(predict(m6,type="prob")[,1]>0.1)]
pred_m1[which(predict(m6,type="prob")[,1]>0.1)]<-0
hist(pred_m1)
plot(roc_perf2, avg= "vertical", spread.estimate="boxplot", lwd=3,col='blue',
show.spread.at= seq(0.1, 0.9, by=0.1),
main= "Accuracy across the range of possible cutoffs")
length(pred_m1[which(predict(m6,type="prob")[,1]<0.1)])
length(pred_m1[which(predict(m6,type="prob")[,1]>0.1)])
plot(roc_perf2, avg= "vertical", spread.estimate="boxplot", lwd=3,col='blue',
show.spread.at= seq(0.1, 0.9, by=0.05),
main= "Accuracy across the range of possible cutoffs")
roc_perf2<-performance(roc_pred,measure="acc")
plot(roc_perf2, avg= "vertical", spread.estimate="boxplot", lwd=3,col='blue',
show.spread.at= seq(0, 0.9, by=0.05),
main= "Accuracy across the range of possible cutoffs")
Cutoff of 0.1 works well
length(pred_m1[which(predict(m6,type="prob")[,1]<0.05)])
length(pred_m1[which(predict(m6,type="prob")[,1]>0.05)])
roc_perf2<-performance(roc_pred,measure="acc")
plot(roc_perf,col=tim.colors(10))
plot(roc_perf2, avg= "vertical", spread.estimate="boxplot", lwd=3,col='blue',
show.spread.at= seq(0, 0.9, by=0.05),
main= "Accuracy across the range of possible cutoffs")
length(pred_m1[which(predict(m6,type="prob")[,1]<0.05)])
pred_m1[which(predict(m6,type="prob")[,1]<0.05)]<-0
plot(snag_plot,pred_m1,xlim=c(0,50),ylim=c(0,50),xlab="Response",ylab="Fitted"); abline(a=0,b=1,col="red")
plot(m6$y,pred_m1,xlim=c(0,50),ylim=c(0,50),xlab="Response",ylab="Fitted"); abline(a=0,b=1,col="red")
pred_m1<-predict(m6,type="response")
plot(m6$y,pred_m1,xlim=c(0,50),ylim=c(0,50),xlab="Response",ylab="Fitted"); abline(a=0,b=1,col="red")
GOAL: Model snag density as a function of habitat variables
Load Libraries
library(adehabitatHR)
library(adehabitatHS)
library(maptools)
gpclibPermit()
library(dismo)
library(sp)
library(lme4)
library(glmmADMB)
library(pscl)
Load data
folder<-getwd()
setwd("../")
setwd("./Data/Telem_data")
load("BBT_data_clean.Rdata")
attach(bbt.data)
Make YEAR-specific SITE CODE
yr<-format(datat$Time,format="%y")
datat$SiteYr<-paste(datat$Site,yr,sep="_")
yr2<-format(strptime(substrate$Year,format="%Y"),format="%y")
substrate$SiteYr<-paste(substrate$Site_code,yr2,sep="_")
PATCH IN SUBSTRATE
Take out no-veg data
data4<-merge(datat,substrate,by="SiteYr",all=F)
forage<-data4[,-c(18:22)]
BACKGROUND POINTS
bg_plots<-available[,c(2,5:6,35:39)]
Take out no 50m plot data
bg_plots<-bg_plots[is.na(bg_plots$X50_m_prefire_CWHR_size)==FALSE,]
names(bg_plots)<-c("Fire","east","north","cwhr_class","cwhr_size","cwhr_cover","snags_ba","live_ba")
MERGE POINTS
forage_lim<-forage[,c("Fire","East","North","X50_m_prefire_CWHR_class","X50_m_prefire_CWHR_size", "X50_m_prefire_CWHR_cover","X50_m_10_BAF_snags","X50_m_10_BAF_live_trees")]
forage_lim<-forage_lim[-which(duplicated(forage$SiteYr)==T),]
names(forage_lim)<-names(bg_plots)
plot50<-rbind(bg_plots,forage_lim)
Create Spatial Data frame
proj <- CRS("+proj=utm +zone=10 +datum=WGS84 +units=m")
plot50sp<-SpatialPointsDataFrame(coords= plot50[,2:3],data= plot50[,c(1,4:8)],proj4string=proj)
extent<-bbox(plot50sp)
Load in Remote data
setwd(folder)
setwd("./Layers")
precc_bbt<-raster("precc_bbt.tif")
pet_cc<-raster("pet_cc.tif")
sug_cc<-raster("sug_cc.tif")
whe_cc<-raster("whe_cc.tif")
setwd(folder)
Calc values for bbt bg points
precc_bbt_pts<-extract(precc_bbt,plot50sp)
pet_cc_pts<-extract(pet_cc,plot50sp)
sug_cc_pts<-extract(sug_cc,plot50sp)
whe_cc_pts<-extract(whe_cc,plot50sp)
cc_bbt_pts<-apply(data.frame(pet_cc_pts,sug_cc_pts,whe_cc_pts),1,max,na.rm=T)
size<-plot50$cwhr_size
snag_ct<-plot50$snags_ba
fire<-plot50$Fire
REGRESSION
cc.st<-(cc_bbt_pts-mean(cc_bbt_pts,na.rm=T))/sd(cc_bbt_pts,na.rm=T)
precc.st<-(precc_bbt_pts-mean(precc_bbt_pts,na.rm=T))/sd(precc_bbt_pts,na.rm=T)
cc_bbt_pts2<-cc_bbt_pts* cc_bbt_pts
cc.st2<-cc.st*cc.st
mnull<-glm(snag_ct ~ 1)
log.snag<-log(snag_ct)
Data-frame
Modeling use Zero-inflated Poisson
http://www.ats.ucla.edu/stat/r/dae/zipoisson.htm
mod.data<-data.frame(snag_ct,log.snag,precc.st,cc.st,cc.st2,size)
mod.data<-mod.data[-which(is.na(snag_ct)),]
?hurdle
?zeroinfl
?hurdle
Load Libraries#
library(adehabitatHR)#
library(adehabitatHS)#
library(maptools)#
gpclibPermit()#
library(dismo)#
library(sp)#
library(lme4)#
library(glmmADMB)#
library(pscl)#
library(raster)#
#
## Load data#
folder<-getwd()#
setwd("../")#
setwd("../")#
setwd("./Data/Telem_data")#
load("BBT_data_clean.Rdata")#
attach(bbt.data)#
#
########################## Make YEAR-specific SITE CODE#
yr<-format(datat$Time,format="%y")#
datat$SiteYr<-paste(datat$Site,yr,sep="_")#
yr2<-format(strptime(substrate$Year,format="%Y"),format="%y")#
substrate$SiteYr<-paste(substrate$Site_code,yr2,sep="_")#
#
############## PATCH IN SUBSTRATE#
## Take out no-veg data#
data4<-merge(datat,substrate,by="SiteYr",all=F)#
forage<-data4[,-c(18:22)]#
#
#### BACKGROUND POINTS#
bg_plots<-available[,c(2,5:6,35:39)]#
# Take out no 50m plot data#
bg_plots<-bg_plots[is.na(bg_plots$X50_m_prefire_CWHR_size)==FALSE,]#
names(bg_plots)<-c("Fire","east","north","cwhr_class","cwhr_size","cwhr_cover","snags_ba","live_ba")#
#
##################### MERGE POINTS#
forage_lim<-forage[,c("Fire","East","North","X50_m_prefire_CWHR_class","X50_m_prefire_CWHR_size", "X50_m_prefire_CWHR_cover","X50_m_10_BAF_snags","X50_m_10_BAF_live_trees")]#
forage_lim<-forage_lim[-which(duplicated(forage$SiteYr)==T),]#
names(forage_lim)<-names(bg_plots)#
plot50<-rbind(bg_plots,forage_lim)#
#
## Create Spatial Data frame#
proj <- CRS("+proj=utm +zone=10 +datum=WGS84 +units=m")#
plot50sp<-SpatialPointsDataFrame(coords= plot50[,2:3],data= plot50[,c(1,4:8)],proj4string=proj)#
extent<-bbox(plot50sp)#
#
####################################### Load in Remote data#
setwd(folder)#
setwd("./Layers")#
precc_bbt<-raster("precc_bbt.tif")#
pet_cc<-raster("pet_cc.tif")#
sug_cc<-raster("sug_cc.tif")#
whe_cc<-raster("whe_cc.tif")#
setwd(folder)#
#
###################################### Calc values for bbt bg points#
precc_bbt_pts<-extract(precc_bbt,plot50sp)#
pet_cc_pts<-extract(pet_cc,plot50sp)#
sug_cc_pts<-extract(sug_cc,plot50sp)#
whe_cc_pts<-extract(whe_cc,plot50sp)#
cc_bbt_pts<-apply(data.frame(pet_cc_pts,sug_cc_pts,whe_cc_pts),1,max,na.rm=T)#
#
size<-plot50$cwhr_size#
snag_ct<-plot50$snags_ba#
fire<-plot50$Fire#
#
################ Setup#
cc.st<-(cc_bbt_pts-mean(cc_bbt_pts,na.rm=T))/sd(cc_bbt_pts,na.rm=T)#
precc.st<-(precc_bbt_pts-mean(precc_bbt_pts,na.rm=T))/sd(precc_bbt_pts,na.rm=T)#
cc_bbt_pts2<-cc_bbt_pts* cc_bbt_pts#
cc.st2<-cc.st*cc.st#
#
## Data-frame#
mod.data<-data.frame(snag_ct,precc.st,cc.st,cc.st2,size)#
mod.data<-mod.data[-which(is.na(snag_ct)),]#
mod.data$log.snag<-log(mod.data$snag_ct+0.01)#
mod.data<-mod.data[-which(is.na(mod.data$precc.st)),]#
mod.data<-mod.data[-which(is.na(mod.data$size)),]
setwd("../")#
setwd("../")#
setwd("./Data/Telem_data")
mu.cc<-mean(cc_bbt_pts,na.rm=T)#
sd.cc<-sd(cc_bbt_pts,na.rm=T)#
mu.precc<-mean(precc_bbt_pts,na.rm=T)#
sd.precc<-sd(precc_bbt_pts,na.rm=T)
export_snag<-list(mu.cc= mu.cc,sd.cc= sd.cc,mu.precc= mu.precc,sd.precc= sd.precc)
save(export,file="snag_variable_means.Rdata")
save(export_snag,file="snag_variable_means.Rdata")
